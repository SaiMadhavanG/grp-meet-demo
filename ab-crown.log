Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  sparse_interm: true
  save_adv_example: false
  eval_adv_example: false
  show_adv_example: false
  precompile_jit: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
  deterministic_opt: false
  graph_optimizer: 'Customized("custom_graph_optimizer", "default_optimizer")'
  buffer_has_batchdim: false
  save_output: false
  output_file: out.pkl
  return_optimized_model: false
model:
  name: mnist64fc
  path: ../mnist_fc.pt
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
  onnx_vnnlib_joint_optimization_flags: none
  check_optmized: false
  flatten_final_output: false
  optimize_graph: null
  with_jacobian: false
data:
  start: 0
  end: 20
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.2
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
  rhs_offset: null
solver:
  batch_size: 4096
  auto_enlarge_batch_size: false
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  optimize_disjuncts_separately: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
    relu_option: adaptive
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_alphas: false
    lr_decay: 0.98
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: false
    disable_optimization: []
  invprop:
    apply_output_constraints_to: []
    tighten_input_bounds: false
    best_of_oc_and_no_oc: false
    directly_optimize: []
    oc_lr: 0.1
    share_gammas: false
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
    reset_threshold: 1.0
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
    skip_unsafe: false
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 180
  timeout_scale: 1
  max_iterations: -1
  override_timeout: null
  get_upper_bound: false
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: true
  recompute_interm: false
  sort_domain_interval: -1
  vanilla_crown: false
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    nonlinear_split:
      method: shortcut
      branching_point_method: uniform
      num_branches: 2
      filter: false
      filter_beta: false
      filter_batch_size: 10000
      filter_iterations: 25
      use_min: false
      loose_tanh_threshold: null
      dynamic_bbps: false
      dynamic_options: [uniform, three_left, three_right]
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_sum: false
      bf_backup_thresh: -1
      bf_rhs_offset: 0
      bf_iters: 1000000000.0
      bf_batch_size: 100000
      bf_zero_crossing_score: false
      touch_zero_score: 0
      ibp_enhancement: false
      catch_assertion: false
      compare_with_old_bounds: false
      update_rhs_with_attack: false
      sb_coeff_thresh: 0.001
      sort_index: null
      sort_descending: true
      show_progress: false
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_alpha_scale: false
  pgd_loss_mode: null
  enable_mip_attack: false
  adv_saver: default_adv_saver
  early_stop_condition: default_early_stop_condition
  adv_example_finalizer: default_adv_example_finalizer
  pgd_loss: default_pgd_loss
  cex_path: ./test_cex.txt
  attack_mode: PGD
  attack_tolerance: 0.0
  attack_func: attack_with_general_specs
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
    max_num_domains: 10
debug:
  view_model: false
  lp_test: null
  rescale_vnnlib_ptb: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0
  print_verbose_decisions: false

Experiments at Wed Jun 26 00:34:45 2024 on SAI
Sequential(
  (0): Flatten(start_dim=1, end_dim=-1)
  (1): Linear(in_features=784, out_features=64, bias=True)
  (2): ReLU()
  (3): Linear(in_features=64, out_features=64, bias=True)
  (4): ReLU()
  (5): Linear(in_features=64, out_features=64, bias=True)
  (6): ReLU()
  (7): Linear(in_features=64, out_features=64, bias=True)
  (8): ReLU()
  (9): Linear(in_features=64, out_features=10, bias=True)
)
Parameters:
  1.weight: shape torch.Size([64, 784])
  1.bias: shape torch.Size([64])
  3.weight: shape torch.Size([64, 64])
  3.bias: shape torch.Size([64])
  5.weight: shape torch.Size([64, 64])
  5.bias: shape torch.Size([64])
  7.weight: shape torch.Size([64, 64])
  7.bias: shape torch.Size([64])
  9.weight: shape torch.Size([10, 64])
  9.bias: shape torch.Size([10])
Trying generic MNIST/CIFAR data loader.
Internal results will be saved to out.txt.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundFlatten(name=/11, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True)
  (/13): BoundRelu(name=/13, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
  (/input.11): BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True)
  (/19): BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
  (/20): BoundLinear(name=/20, inputs=[/19, /9, /10], perturbed=True)
)
Original output: tensor([[-5.83575869, -2.60129404, -0.61998093, -0.10211501, -3.97122264,
         -3.00948763, -8.33787251,  5.18204689, -4.30355024, -0.65844935]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True): [(BoundRelu(name=/13, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True): [(BoundRelu(name=/15, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True): [(BoundRelu(name=/19, inputs=[/input.11], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/13, inputs=[/input], perturbed=True)
   BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
layer /13 using sparse-features alpha with shape [34]; unstable size 34; total size 64 ([1, 64])
layer /13 start_node /input.3 using sparse-spec alpha [2, 24, 1, 34] with unstable size 23 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.7 using sparse-spec alpha [2, 21, 1, 34] with unstable size 20 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.11 using sparse-spec alpha [2, 26, 1, 34] with unstable size 25 total_size 64 output_shape torch.Size([64])
layer /13 start_node /20 using full alpha [2, 9, 1, 34] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 64 ([1, 64])
layer /15 start_node /input.7 using sparse-spec alpha [2, 21, 1, 23] with unstable size 20 total_size 64 output_shape torch.Size([64])
layer /15 start_node /input.11 using sparse-spec alpha [2, 26, 1, 23] with unstable size 25 total_size 64 output_shape torch.Size([64])
layer /15 start_node /20 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [20]; unstable size 20; total size 64 ([1, 64])
layer /17 start_node /input.11 using sparse-spec alpha [2, 26, 1, 20] with unstable size 25 total_size 64 output_shape torch.Size([64])
layer /17 start_node /20 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
layer /19 using sparse-features alpha with shape [25]; unstable size 25; total size 64 ([1, 64])
layer /19 start_node /20 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-31.49079514, -17.36177444, -13.75537682, -14.01630020, -29.11492538,
         -24.87092781, -35.40637207, -28.11907578, -23.09306335]],
       device='cuda:0') None
best_l after optimization: -45.63646697998047
alpha/beta optimization time: 5.053825378417969
initial alpha-crown bounds: tensor([[-8.29090595, -3.15034056, -4.91684914, -4.12894583, -4.34319592,
         -4.49681330, -6.78516483, -5.98032475, -3.54392314]], device='cuda:0')
Worst class: (+ rhs) -8.290905952453613
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.05000000447034836, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.83575869, -2.60129404, -0.61998081, -0.10211513, -3.97122312,
         -3.00948811, -8.33787251,  5.18204784, -4.30355024, -0.65844929]],
       device='cuda:0')
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.69729125, -3.66933799, -1.34249043, -0.88825727, -3.71157646,
          -1.56588161, -4.76618290, -0.76651210, -2.49970055, -1.10069430],
         [-0.69729125, -3.66933799, -1.34249043, -0.88825727, -3.71157646,
          -1.56588161, -4.76618290, -0.76651210, -2.49970055, -1.10069430]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[-0.06922084,  2.90282583,  0.57597834,  0.12174517,  2.94506431,
           0.79936951,  3.99967074,  1.73318839,  0.33418220]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.3439 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 6.9228 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 1, vnnlib ID: 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundFlatten(name=/11, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True)
  (/13): BoundRelu(name=/13, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
  (/input.11): BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True)
  (/19): BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
  (/20): BoundLinear(name=/20, inputs=[/19, /9, /10], perturbed=True)
)
Original output: tensor([[ 0.03221430, -0.89188057,  2.71071959,  0.71821922, -2.92072082,
         -3.29158783, -1.29241145, -2.26334167, -1.68306339, -5.36386490]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True): [(BoundRelu(name=/13, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True): [(BoundRelu(name=/15, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True): [(BoundRelu(name=/19, inputs=[/input.11], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/13, inputs=[/input], perturbed=True)
   BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
layer /13 using sparse-features alpha with shape [20]; unstable size 20; total size 64 ([1, 64])
layer /13 start_node /input.3 using sparse-spec alpha [2, 11, 1, 20] with unstable size 10 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.7 using sparse-spec alpha [2, 13, 1, 20] with unstable size 12 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.11 using sparse-spec alpha [2, 19, 1, 20] with unstable size 18 total_size 64 output_shape torch.Size([64])
layer /13 start_node /20 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 64 ([1, 64])
layer /15 start_node /input.7 using sparse-spec alpha [2, 13, 1, 10] with unstable size 12 total_size 64 output_shape torch.Size([64])
layer /15 start_node /input.11 using sparse-spec alpha [2, 19, 1, 10] with unstable size 18 total_size 64 output_shape torch.Size([64])
layer /15 start_node /20 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [12]; unstable size 12; total size 64 ([1, 64])
layer /17 start_node /input.11 using sparse-spec alpha [2, 19, 1, 12] with unstable size 18 total_size 64 output_shape torch.Size([64])
layer /17 start_node /20 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
layer /19 using sparse-features alpha with shape [18]; unstable size 18; total size 64 ([1, 64])
layer /19 start_node /20 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.32935941,  1.21349454,  0.13494349,  2.66253781, -5.09031248,
         -7.69084740,  4.22978067,  1.17393577,  4.23637342]], device='cuda:0') None
best_l after optimization: 17.223430633544922
alpha/beta optimization time: 2.252549409866333
initial alpha-crown bounds: tensor([[ 0.11771119,  2.33139348,  0.95550931,  3.92362404,  0.22716255,
         -2.05503917,  4.44051743,  2.03669977,  5.24585152]], device='cuda:0')
Worst class: (+ rhs) -2.055039167404175
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.05000000447034836, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.03221469, -0.89188081,  2.71071959,  0.71821904, -2.92072082,
         -3.29158735, -1.29241145, -2.26334143, -1.68306398, -5.36386538]],
       device='cuda:0')
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.53718793, -1.60327494,  1.51776063, -0.32767341, -2.79138279,
           0.39514452,  3.18722177, -3.54475880, -1.78958082, -6.12597466],
         [-0.53718793, -1.60327494,  1.51776063, -0.32767341, -2.79138279,
           0.39514452,  3.18722177, -3.54475880, -1.78958082, -6.12597466]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 2.05494857,  3.12103558,  1.84543407,  4.30914354,  1.12261605,
          -1.66946113,  5.06251955,  3.30734158,  7.64373541]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0144 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 2.3309 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 2, vnnlib ID: 2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundFlatten(name=/11, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True)
  (/13): BoundRelu(name=/13, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
  (/input.11): BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True)
  (/19): BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
  (/20): BoundLinear(name=/20, inputs=[/19, /9, /10], perturbed=True)
)
Original output: tensor([[-7.81118965,  5.01545620, -0.57023239, -1.76814413, -0.58764768,
         -3.89685297, -2.38594818,  0.25950220, -1.25751066, -3.72537374]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True): [(BoundRelu(name=/13, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True): [(BoundRelu(name=/15, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True): [(BoundRelu(name=/19, inputs=[/input.11], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/13, inputs=[/input], perturbed=True)
   BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
layer /13 using sparse-features alpha with shape [34]; unstable size 34; total size 64 ([1, 64])
layer /13 start_node /input.3 using sparse-spec alpha [2, 36, 1, 34] with unstable size 35 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.7 using sparse-spec alpha [2, 30, 1, 34] with unstable size 29 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.11 using sparse-spec alpha [2, 37, 1, 34] with unstable size 36 total_size 64 output_shape torch.Size([64])
layer /13 start_node /20 using full alpha [2, 9, 1, 34] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [35]; unstable size 35; total size 64 ([1, 64])
layer /15 start_node /input.7 using sparse-spec alpha [2, 30, 1, 35] with unstable size 29 total_size 64 output_shape torch.Size([64])
layer /15 start_node /input.11 using sparse-spec alpha [2, 37, 1, 35] with unstable size 36 total_size 64 output_shape torch.Size([64])
layer /15 start_node /20 using full alpha [2, 9, 1, 35] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [29]; unstable size 29; total size 64 ([1, 64])
layer /17 start_node /input.11 using sparse-spec alpha [2, 37, 1, 29] with unstable size 36 total_size 64 output_shape torch.Size([64])
layer /17 start_node /20 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
layer /19 using sparse-features alpha with shape [36]; unstable size 36; total size 64 ([1, 64])
layer /19 start_node /20 using full alpha [2, 9, 1, 36] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-38.02352905, -33.77223206, -30.71232986, -33.35020065, -36.31077957,
         -37.88944244, -40.60851288, -35.30675507, -39.16845703]],
       device='cuda:0') None
best_l after optimization: -56.68046951293945
alpha/beta optimization time: 3.4447760581970215
initial alpha-crown bounds: tensor([[-4.20216560, -6.54414511, -4.91344738, -5.53275108, -8.26515865,
         -8.34305573, -6.70121670, -6.26820183, -5.91032600]], device='cuda:0')
Worst class: (+ rhs) -8.343055725097656
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.05000000447034836, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.81118965,  5.01545572, -0.57023227, -1.76814473, -0.58764768,
         -3.89685392, -2.38594794,  0.25950274, -1.25751054, -3.72537374]],
       device='cuda:0')
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.33079863, -0.92989480,  1.94765961, -1.30204248, -0.46009436,
          -2.90486193,  0.68236744, -1.06641138, -0.55789614, -4.21796751],
         [-4.33079863, -0.92989480,  1.94765961, -1.30204248, -0.46009436,
          -2.90486193,  0.68236744, -1.06641138, -0.55789614, -4.21796751]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 3.40090370, -2.87755442,  0.37214768, -0.46980044,  1.97496712,
          -1.61226225,  0.13651657, -0.37199867,  3.28807259]]],
       device='cuda:0')
number of violation:  4
Attack finished in 0.0140 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 3.5187 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 3, vnnlib ID: 3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundFlatten(name=/11, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True)
  (/13): BoundRelu(name=/13, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
  (/input.11): BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True)
  (/19): BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
  (/20): BoundLinear(name=/20, inputs=[/19, /9, /10], perturbed=True)
)
Original output: tensor([[ 4.60579348, -4.75552511, -0.54055047, -3.17249012, -3.84671998,
         -1.39172184, -0.59700030, -4.74437523, -0.78708297, -2.69918108]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True): [(BoundRelu(name=/13, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True): [(BoundRelu(name=/15, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True): [(BoundRelu(name=/19, inputs=[/input.11], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/13, inputs=[/input], perturbed=True)
   BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
layer /13 using sparse-features alpha with shape [20]; unstable size 20; total size 64 ([1, 64])
layer /13 start_node /input.3 using sparse-spec alpha [2, 11, 1, 20] with unstable size 10 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.7 using sparse-spec alpha [2, 12, 1, 20] with unstable size 11 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.11 using sparse-spec alpha [2, 18, 1, 20] with unstable size 17 total_size 64 output_shape torch.Size([64])
layer /13 start_node /20 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 64 ([1, 64])
layer /15 start_node /input.7 using sparse-spec alpha [2, 12, 1, 10] with unstable size 11 total_size 64 output_shape torch.Size([64])
layer /15 start_node /input.11 using sparse-spec alpha [2, 18, 1, 10] with unstable size 17 total_size 64 output_shape torch.Size([64])
layer /15 start_node /20 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [11]; unstable size 11; total size 64 ([1, 64])
layer /17 start_node /input.11 using sparse-spec alpha [2, 18, 1, 11] with unstable size 17 total_size 64 output_shape torch.Size([64])
layer /17 start_node /20 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
layer /19 using sparse-features alpha with shape [17]; unstable size 17; total size 64 ([1, 64])
layer /19 start_node /20 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.81614828,  2.19799471,  5.08176136, -0.85846567,  3.39750075,
         -1.84559512,  4.46972847,  1.88578224,  1.17787385]], device='cuda:0') None

all verified at 11th iter
best_l after optimization: 31.66932487487793
alpha/beta optimization time: 0.38229823112487793
initial alpha-crown bounds: tensor([[5.26829052, 2.73272872, 5.40533686, 2.27075911, 3.66019583, 0.07851303,
         6.15531826, 2.33970714, 3.75847530]], device='cuda:0')
Worst class: (+ rhs) 0.07851302623748779
verified with init bound!
Result: safe-incomplete in 0.4434 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 4, vnnlib ID: 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundFlatten(name=/11, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True)
  (/13): BoundRelu(name=/13, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
  (/input.11): BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True)
  (/19): BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
  (/20): BoundLinear(name=/20, inputs=[/19, /9, /10], perturbed=True)
)
Original output: tensor([[-5.05011988, -3.96800327, -4.96451283, -3.99368906,  4.81671524,
         -3.47158003, -3.59390926, -0.14261165, -4.34602356,  1.60422337]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True): [(BoundRelu(name=/13, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True): [(BoundRelu(name=/15, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True): [(BoundRelu(name=/19, inputs=[/input.11], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/13, inputs=[/input], perturbed=True)
   BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
layer /13 using sparse-features alpha with shape [22]; unstable size 22; total size 64 ([1, 64])
layer /13 start_node /input.3 using sparse-spec alpha [2, 21, 1, 22] with unstable size 20 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.7 using sparse-spec alpha [2, 13, 1, 22] with unstable size 12 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.11 using sparse-spec alpha [2, 14, 1, 22] with unstable size 13 total_size 64 output_shape torch.Size([64])
layer /13 start_node /20 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 64 ([1, 64])
layer /15 start_node /input.7 using sparse-spec alpha [2, 13, 1, 20] with unstable size 12 total_size 64 output_shape torch.Size([64])
layer /15 start_node /input.11 using sparse-spec alpha [2, 14, 1, 20] with unstable size 13 total_size 64 output_shape torch.Size([64])
layer /15 start_node /20 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [12]; unstable size 12; total size 64 ([1, 64])
layer /17 start_node /input.11 using sparse-spec alpha [2, 14, 1, 12] with unstable size 13 total_size 64 output_shape torch.Size([64])
layer /17 start_node /20 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
layer /19 using sparse-features alpha with shape [13]; unstable size 13; total size 64 ([1, 64])
layer /19 start_node /20 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-13.32272911,  -2.78318310, -10.82345581, -10.71859360, -11.15943336,
          -6.20231867,  -6.86337948, -14.59670353, -14.56002617]],
       device='cuda:0') None
best_l after optimization: -18.46515655517578
alpha/beta optimization time: 3.1165289878845215
initial alpha-crown bounds: tensor([[-4.10691452,  1.26693296, -2.30012655, -1.93289101, -2.76089120,
         -1.70908666,  0.11752874, -4.14360428, -2.89610386]], device='cuda:0')
Worst class: (+ rhs) -4.143604278564453
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.05000000447034836, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.05011988, -3.96800423, -4.96451283, -3.99368930,  4.81671476,
         -3.47158003, -3.59390903, -0.14261189, -4.34602356,  1.60422349]],
       device='cuda:0')
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.81095982, -5.63231850, -5.94206429, -4.26613283,  2.92363954,
          -3.84038639, -7.21689272,  1.10574043, -4.63047361,  4.36911345],
         [-5.81095982, -5.63231850, -5.94206429, -4.26613283,  2.92363954,
          -3.84038639, -7.21689272,  1.10574043, -4.63047361,  4.36911345]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 8.73459911,  8.55595779,  8.86570358,  7.18977261,  6.76402569,
          10.14053249,  1.81789911,  7.55411339, -1.44547391]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0146 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 3.1924 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 5, vnnlib ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundFlatten(name=/11, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True)
  (/13): BoundRelu(name=/13, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
  (/input.11): BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True)
  (/19): BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
  (/20): BoundLinear(name=/20, inputs=[/19, /9, /10], perturbed=True)
)
Original output: tensor([[-8.53915787,  5.46891403, -1.30601931, -1.19790602, -0.38092974,
         -3.83308840, -3.33250761,  0.26306304, -1.60116673, -3.36797714]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True): [(BoundRelu(name=/13, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True): [(BoundRelu(name=/15, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True): [(BoundRelu(name=/19, inputs=[/input.11], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/13, inputs=[/input], perturbed=True)
   BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
layer /13 using sparse-features alpha with shape [29]; unstable size 29; total size 64 ([1, 64])
layer /13 start_node /input.3 using sparse-spec alpha [2, 27, 1, 29] with unstable size 26 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.7 using sparse-spec alpha [2, 22, 1, 29] with unstable size 21 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.11 using sparse-spec alpha [2, 27, 1, 29] with unstable size 26 total_size 64 output_shape torch.Size([64])
layer /13 start_node /20 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 64 ([1, 64])
layer /15 start_node /input.7 using sparse-spec alpha [2, 22, 1, 26] with unstable size 21 total_size 64 output_shape torch.Size([64])
layer /15 start_node /input.11 using sparse-spec alpha [2, 27, 1, 26] with unstable size 26 total_size 64 output_shape torch.Size([64])
layer /15 start_node /20 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [21]; unstable size 21; total size 64 ([1, 64])
layer /17 start_node /input.11 using sparse-spec alpha [2, 27, 1, 21] with unstable size 26 total_size 64 output_shape torch.Size([64])
layer /17 start_node /20 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
layer /19 using sparse-features alpha with shape [26]; unstable size 26; total size 64 ([1, 64])
layer /19 start_node /20 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-22.79364014, -22.99134064, -20.75736237, -20.05101967, -20.43350410,
         -21.84477043, -24.86226654, -24.34164429, -25.82526779]],
       device='cuda:0') None
best_l after optimization: -38.91988754272461
alpha/beta optimization time: 3.512542247772217
initial alpha-crown bounds: tensor([[-2.31176496, -5.67638969, -3.77092767, -4.26787472, -3.21658587,
         -4.69227457, -4.83833456, -5.69864559, -4.44709301]], device='cuda:0')
Worst class: (+ rhs) -5.69864559173584
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.05000000447034836, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.53915787,  5.46891403, -1.30601931, -1.19790626, -0.38092974,
         -3.83308840, -3.33250761,  0.26306304, -1.60116661, -3.36797714]],
       device='cuda:0')
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.24122620, -0.89968407, -0.83932698, -1.28940022, -2.31597853,
          -3.29971886, -4.68989611, -0.44405210, -0.09697115, -0.86416841],
         [-5.24122620, -0.89968407, -0.83932698, -1.28940022, -2.31597853,
          -3.29971886, -4.68989611, -0.44405210, -0.09697115, -0.86416841]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 4.34154224, -0.06035709,  0.38971615,  1.41629446,  2.40003490,
           3.79021215, -0.45563197, -0.80271292, -0.03551567]]],
       device='cuda:0')
number of violation:  4
Attack finished in 0.0154 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 3.5769 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 6, vnnlib ID: 6 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundFlatten(name=/11, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True)
  (/13): BoundRelu(name=/13, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
  (/input.11): BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True)
  (/19): BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
  (/20): BoundLinear(name=/20, inputs=[/19, /9, /10], perturbed=True)
)
Original output: tensor([[-6.43338203, -1.23802912, -5.13837194, -1.12549198,  3.52177954,
         -3.61353970, -4.74808121, -1.90051734, -2.34782124,  0.79834759]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True): [(BoundRelu(name=/13, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True): [(BoundRelu(name=/15, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True): [(BoundRelu(name=/19, inputs=[/input.11], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/13, inputs=[/input], perturbed=True)
   BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
layer /13 using sparse-features alpha with shape [25]; unstable size 25; total size 64 ([1, 64])
layer /13 start_node /input.3 using sparse-spec alpha [2, 31, 1, 25] with unstable size 30 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.7 using sparse-spec alpha [2, 19, 1, 25] with unstable size 18 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.11 using sparse-spec alpha [2, 31, 1, 25] with unstable size 30 total_size 64 output_shape torch.Size([64])
layer /13 start_node /20 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [30]; unstable size 30; total size 64 ([1, 64])
layer /15 start_node /input.7 using sparse-spec alpha [2, 19, 1, 30] with unstable size 18 total_size 64 output_shape torch.Size([64])
layer /15 start_node /input.11 using sparse-spec alpha [2, 31, 1, 30] with unstable size 30 total_size 64 output_shape torch.Size([64])
layer /15 start_node /20 using full alpha [2, 9, 1, 30] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [18]; unstable size 18; total size 64 ([1, 64])
layer /17 start_node /input.11 using sparse-spec alpha [2, 31, 1, 18] with unstable size 30 total_size 64 output_shape torch.Size([64])
layer /17 start_node /20 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
layer /19 using sparse-features alpha with shape [30]; unstable size 30; total size 64 ([1, 64])
layer /19 start_node /20 using full alpha [2, 9, 1, 30] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-21.23170853, -14.93618584, -25.87138939, -27.00802994, -25.20829010,
         -13.02869606, -21.70902443, -26.61062622, -23.81857681]],
       device='cuda:0') None
best_l after optimization: -42.53384017944336
alpha/beta optimization time: 3.4578018188476562
initial alpha-crown bounds: tensor([[-2.76208591, -2.76740456, -5.53505898, -6.49703693, -6.11917496,
         -4.27228546, -4.09170532, -7.13900757, -3.35008121]], device='cuda:0')
Worst class: (+ rhs) -7.139007568359375
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.05000000447034836, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.43338203, -1.23802972, -5.13837147, -1.12549162,  3.52177954,
         -3.61353922, -4.74808025, -1.90051734, -2.34782124,  0.79834771]],
       device='cuda:0')
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.51292610, -2.10731006, -3.21662164,  1.59486830, -2.98134565,
          -0.97122848, -5.35878086, -4.93032122,  1.10688281, -0.12016972],
         [-3.51292610, -2.10731006, -3.21662164,  1.59486830, -2.98134565,
          -0.97122848, -5.35878086, -4.93032122,  1.10688281, -0.12016972]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.53158045, -0.87403560,  0.23527598, -4.57621384, -2.01011705,
           2.37743521,  1.94897556, -4.08822823, -2.86117601]]],
       device='cuda:0')
number of violation:  5
Attack finished in 0.0140 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 3.5344 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 7, vnnlib ID: 7 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundFlatten(name=/11, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True)
  (/13): BoundRelu(name=/13, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
  (/input.11): BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True)
  (/19): BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
  (/20): BoundLinear(name=/20, inputs=[/19, /9, /10], perturbed=True)
)
Original output: tensor([[-5.68143702, -3.09399295, -4.90162706, -1.28833425,  0.78948104,
         -2.39870024, -6.38183594, -1.32299364, -2.20833969,  2.47947049]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True): [(BoundRelu(name=/13, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True): [(BoundRelu(name=/15, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True): [(BoundRelu(name=/19, inputs=[/input.11], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/13, inputs=[/input], perturbed=True)
   BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
layer /13 using sparse-features alpha with shape [16]; unstable size 16; total size 64 ([1, 64])
layer /13 start_node /input.3 using sparse-spec alpha [2, 21, 1, 16] with unstable size 20 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.7 using sparse-spec alpha [2, 7, 1, 16] with unstable size 6 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.11 using sparse-spec alpha [2, 15, 1, 16] with unstable size 14 total_size 64 output_shape torch.Size([64])
layer /13 start_node /20 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 64 ([1, 64])
layer /15 start_node /input.7 using sparse-spec alpha [2, 7, 1, 20] with unstable size 6 total_size 64 output_shape torch.Size([64])
layer /15 start_node /input.11 using sparse-spec alpha [2, 15, 1, 20] with unstable size 14 total_size 64 output_shape torch.Size([64])
layer /15 start_node /20 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [6]; unstable size 6; total size 64 ([1, 64])
layer /17 start_node /input.11 using sparse-spec alpha [2, 15, 1, 6] with unstable size 14 total_size 64 output_shape torch.Size([64])
layer /17 start_node /20 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
layer /19 using sparse-features alpha with shape [14]; unstable size 14; total size 64 ([1, 64])
layer /19 start_node /20 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ -5.38189125,  -3.76717544,  -6.85140371,  -3.86370802,  -5.08065939,
          -4.67595673, -12.36928082,   0.41608727,  -9.66975403]],
       device='cuda:0') None
best_l after optimization: -15.090320587158203
alpha/beta optimization time: 1.3601508140563965
initial alpha-crown bounds: tensor([[-0.19269502, -0.77240074, -1.50247335, -1.35678113, -3.28848028,
         -1.47641039, -4.37981510,  1.61153293, -3.73279762]], device='cuda:0')
Worst class: (+ rhs) -4.379815101623535
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.05000000447034836, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.68143654, -3.09399271, -4.90162706, -1.28833437,  0.78948063,
         -2.39870024, -6.38183546, -1.32299364, -2.20833993,  2.47947025]],
       device='cuda:0')
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.07487607, -2.65562773, -1.66942596, -3.71992230,  0.64561290,
          -2.00987720,  1.31375170, -3.96169806,  0.48255041, -2.14635372],
         [-3.07487607, -2.65562773, -1.66942596, -3.71992230,  0.64561290,
          -2.00987720,  1.31375170, -3.96169806,  0.48255041, -2.14635372]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.92852235,  0.50927401, -0.47692776,  1.57356858, -2.79196668,
          -0.13647652, -3.46010542,  1.81534433, -2.62890410]]],
       device='cuda:0')
number of violation:  5
Attack finished in 0.0150 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 1.4385 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 8, vnnlib ID: 8 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundFlatten(name=/11, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True)
  (/13): BoundRelu(name=/13, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
  (/input.11): BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True)
  (/19): BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
  (/20): BoundLinear(name=/20, inputs=[/19, /9, /10], perturbed=True)
)
Original output: tensor([[-1.32382512, -3.97046947, -1.14390874, -4.27894258, -1.12345970,
          0.46091145,  2.85472155, -4.35698700,  0.39025220, -2.43663454]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True): [(BoundRelu(name=/13, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True): [(BoundRelu(name=/15, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True): [(BoundRelu(name=/19, inputs=[/input.11], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/13, inputs=[/input], perturbed=True)
   BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
layer /13 using sparse-features alpha with shape [22]; unstable size 22; total size 64 ([1, 64])
layer /13 start_node /input.3 using sparse-spec alpha [2, 20, 1, 22] with unstable size 19 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.7 using sparse-spec alpha [2, 18, 1, 22] with unstable size 17 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.11 using sparse-spec alpha [2, 22, 1, 22] with unstable size 21 total_size 64 output_shape torch.Size([64])
layer /13 start_node /20 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 64 ([1, 64])
layer /15 start_node /input.7 using sparse-spec alpha [2, 18, 1, 19] with unstable size 17 total_size 64 output_shape torch.Size([64])
layer /15 start_node /input.11 using sparse-spec alpha [2, 22, 1, 19] with unstable size 21 total_size 64 output_shape torch.Size([64])
layer /15 start_node /20 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [17]; unstable size 17; total size 64 ([1, 64])
layer /17 start_node /input.11 using sparse-spec alpha [2, 22, 1, 17] with unstable size 21 total_size 64 output_shape torch.Size([64])
layer /17 start_node /20 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
layer /19 using sparse-features alpha with shape [21]; unstable size 21; total size 64 ([1, 64])
layer /19 start_node /20 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ -7.89470577,  -8.49074078,  -9.40606308,  -4.69560957, -19.96257019,
          -8.73612213, -13.85250854,  -9.54098511, -15.84983444]],
       device='cuda:0') None
best_l after optimization: -26.186948776245117
alpha/beta optimization time: 3.329932689666748
initial alpha-crown bounds: tensor([[-1.45305443, -0.55494726, -2.28891373,  1.00516927, -7.40148401,
         -4.51725006, -2.57500887, -3.35491586, -5.04654312]], device='cuda:0')
Worst class: (+ rhs) -7.40148401260376
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.05000000447034836, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.32382512, -3.97046947, -1.14390874, -4.27894258, -1.12345946,
          0.46091115,  2.85472155, -4.35698700,  0.39025190, -2.43663430]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.32382500, -3.97046947, -1.14390826, -4.27894258, -1.12345922,
           0.46091104,  2.85472155, -4.35698748,  0.39025232, -2.43663478],
         [-1.32382500, -3.97046947, -1.14390826, -4.27894258, -1.12345922,
           0.46091104,  2.85472155, -4.35698748,  0.39025232, -2.43663478]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 1.78473604,  4.43138027,  1.60481930,  4.73985386,  1.58437026,
          -2.39381051,  4.81789875,  0.07065871,  2.89754581]]],
       device='cuda:0')
number of violation:  1
Result: unsafe-pgd in 3.3872 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 9, vnnlib ID: 9 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundFlatten(name=/11, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True)
  (/13): BoundRelu(name=/13, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
  (/input.11): BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True)
  (/19): BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
  (/20): BoundLinear(name=/20, inputs=[/19, /9, /10], perturbed=True)
)
Original output: tensor([[-4.20373821, -5.03818226, -3.44071460, -4.22704411,  0.97536600,
         -4.40671682, -5.62654400, -0.16851714, -1.48314989,  2.63212681]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True): [(BoundRelu(name=/13, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True): [(BoundRelu(name=/15, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True): [(BoundRelu(name=/19, inputs=[/input.11], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/13, inputs=[/input], perturbed=True)
   BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
layer /13 using sparse-features alpha with shape [18]; unstable size 18; total size 64 ([1, 64])
layer /13 start_node /input.3 using sparse-spec alpha [2, 18, 1, 18] with unstable size 17 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.7 using sparse-spec alpha [2, 13, 1, 18] with unstable size 12 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.11 using sparse-spec alpha [2, 18, 1, 18] with unstable size 17 total_size 64 output_shape torch.Size([64])
layer /13 start_node /20 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 64 ([1, 64])
layer /15 start_node /input.7 using sparse-spec alpha [2, 13, 1, 17] with unstable size 12 total_size 64 output_shape torch.Size([64])
layer /15 start_node /input.11 using sparse-spec alpha [2, 18, 1, 17] with unstable size 17 total_size 64 output_shape torch.Size([64])
layer /15 start_node /20 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [12]; unstable size 12; total size 64 ([1, 64])
layer /17 start_node /input.11 using sparse-spec alpha [2, 18, 1, 12] with unstable size 17 total_size 64 output_shape torch.Size([64])
layer /17 start_node /20 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
layer /19 using sparse-features alpha with shape [17]; unstable size 17; total size 64 ([1, 64])
layer /19 start_node /20 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ -6.17426443,  -6.41540527, -14.51598549, -11.06980991,  -3.02997303,
          -3.91470766, -11.13307858,  -6.66926622, -10.18131447]],
       device='cuda:0') None
best_l after optimization: -8.558598518371582
alpha/beta optimization time: 1.7578086853027344
initial alpha-crown bounds: tensor([[-0.39203739,  0.27399778, -1.35320914, -0.70351315, -1.55849934,
         -0.69419533, -2.78974509,  1.74043214, -3.08182907]], device='cuda:0')
Worst class: (+ rhs) -3.081829071044922
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.05000000447034836, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.20373869, -5.03818226, -3.44071531, -4.22704458,  0.97536612,
         -4.40671682, -5.62654448, -0.16851726, -1.48315001,  2.63212729]],
       device='cuda:0')
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.84096217, -2.73951626, -2.45044208, -3.23672962, -0.45766827,
          -1.82832539, -0.11077625, -3.93985200,  0.78414488, -1.17946982],
         [-3.84096217, -2.73951626, -2.45044208, -3.23672962, -0.45766827,
          -1.82832539, -0.11077625, -3.93985200,  0.78414488, -1.17946982]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 2.66149235,  1.56004643,  1.27097225,  2.05725980, -0.72180152,
           0.64885557, -1.06869364,  2.76038218, -1.96361470]]],
       device='cuda:0')
number of violation:  3
Attack finished in 0.0156 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 1.8222 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 10, vnnlib ID: 10 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundFlatten(name=/11, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True)
  (/13): BoundRelu(name=/13, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
  (/input.11): BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True)
  (/19): BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
  (/20): BoundLinear(name=/20, inputs=[/19, /9, /10], perturbed=True)
)
Original output: tensor([[ 4.99735355, -6.39168310, -1.93706679, -1.13927960, -4.57611656,
         -0.38430625, -3.21804404, -4.48542500, -1.97155690, -1.75819457]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True): [(BoundRelu(name=/13, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True): [(BoundRelu(name=/15, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True): [(BoundRelu(name=/19, inputs=[/input.11], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/13, inputs=[/input], perturbed=True)
   BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
layer /13 using sparse-features alpha with shape [17]; unstable size 17; total size 64 ([1, 64])
layer /13 start_node /input.3 using sparse-spec alpha [2, 11, 1, 17] with unstable size 10 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.7 using sparse-spec alpha [2, 4, 1, 17] with unstable size 3 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.11 using sparse-spec alpha [2, 9, 1, 17] with unstable size 8 total_size 64 output_shape torch.Size([64])
layer /13 start_node /20 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 64 ([1, 64])
layer /15 start_node /input.7 using sparse-spec alpha [2, 4, 1, 10] with unstable size 3 total_size 64 output_shape torch.Size([64])
layer /15 start_node /input.11 using sparse-spec alpha [2, 9, 1, 10] with unstable size 8 total_size 64 output_shape torch.Size([64])
layer /15 start_node /20 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [3]; unstable size 3; total size 64 ([1, 64])
layer /17 start_node /input.11 using sparse-spec alpha [2, 9, 1, 3] with unstable size 8 total_size 64 output_shape torch.Size([64])
layer /17 start_node /20 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
layer /19 using sparse-features alpha with shape [8]; unstable size 8; total size 64 ([1, 64])
layer /19 start_node /20 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.50982690, -0.87674034, -4.56213427,  0.38454902, -3.95345211,
         -1.40329278,  1.49435222, -3.28758621, -1.82991314]], device='cuda:0') None
best_l after optimization: 17.142982482910156
alpha/beta optimization time: 2.9462852478027344
initial alpha-crown bounds: tensor([[ 4.82960224,  1.11710441,  0.75758350,  3.62613726, -0.13079834,
          1.02481604,  4.57070255, -0.45856547,  1.80640090]], device='cuda:0')
Worst class: (+ rhs) -0.45856547355651855
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.05000000447034836, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 4.99735308, -6.39168358, -1.93706656, -1.13927937, -4.57611704,
         -0.38430631, -3.21804476, -4.48542452, -1.97155690, -1.75819445]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 1.77293849, -5.66353655, -0.45905408, -2.56598568, -4.21028328,
          -0.48989332, -0.87021959, -4.89269114,  1.62608123, -1.89685583],
         [ 1.77293849, -5.66353655, -0.45905408, -2.56598568, -4.21028328,
          -0.48989332, -0.87021959, -4.89269114,  1.62608123, -1.89685583]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[7.43647480, 2.23199248, 4.33892441, 5.98322201, 2.26283169,
          2.64315796, 6.66562939, 0.14685726, 3.66979432]]], device='cuda:0')
number of violation:  0
Attack finished in 0.2779 seconds.
PGD attack failed
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 64]), torch.Size([9, 1, 64]), torch.Size([9, 1, 64]), torch.Size([9, 1, 64])]

Properties batch 0, size 1
Remaining timeout: 176.72195100784302
##### Instance 10 first 10 spec matrices: 
tensor([[[ 1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.829602241516113.

Properties batch 1, size 1
Remaining timeout: 176.61090660095215
##### Instance 10 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.117104411125183.

Properties batch 2, size 1
Remaining timeout: 176.53047585487366
##### Instance 10 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.757583498954773.

Properties batch 3, size 1
Remaining timeout: 176.44575476646423
##### Instance 10 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.6261372566223145.

Properties batch 4, size 1
Remaining timeout: 176.36177706718445
##### Instance 10 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.13079834]], device='cuda:0') need to verify.
Model prediction is: tensor([ 4.99735355, -6.39168310, -1.93706679, -1.13927960, -4.57611656,
        -0.38430625, -3.21804404, -4.48542500, -1.97155690, -1.75819457],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /13 start_node /20 with alignment adjustment
setting alpha for layer /15 start_node /20 with alignment adjustment
setting alpha for layer /17 start_node /20 with alignment adjustment
setting alpha for layer /19 start_node /20 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 64]), torch.Size([1, 1, 64]), torch.Size([1, 1, 64]), torch.Size([1, 1, 64])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.13079834]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/input.7,/input.11,/20
Keeping alphas for these layers: ['/20']
Keeping alphas for these layers: ['/20']
Node /13 input 0: size torch.Size([64]) unstable 17
Node /15 input 0: size torch.Size([64]) unstable 10
Node /17 input 0: size torch.Size([64]) unstable 3
Node /19 input 0: size torch.Size([64]) unstable 7
-----------------
# of unstable neurons: 37
-----------------

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input.3, 0] 
split level 1: [/input.3, 23] 
split level 2: [/input, 56] 
split level 3: [/input, 55] 
split level 4: [/input, 30] 
split level 5: [/input.11, 30] 
split level 6: [/input.11, 32] 
split level 7: [/input.7, 21] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 256 / 256 = 1.0
pruning-in-iteration extra time: 0.00014090538024902344
Time: prepare 0.1017    bound 0.0141    transfer 0.0005    finalize 0.0411    func 0.1575    
Accumulated time: func 0.1575    prepare 0.1025    bound 0.0141    transfer 0.0005    finalize 0.0411    
Length of domains: 0
Time: pickout 0.0010    decision 0.1914    set_bounds 0.0228    solve 0.1576    add 0.0002    
Accumulated time: pickout 0.0010    decision 0.1914    set_bounds 0.0228    solve 0.1576    add 0.0002    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.3882791996002197


Properties batch 5, size 1
Remaining timeout: 175.85833263397217
##### Instance 10 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0248160362243652.

Properties batch 6, size 1
Remaining timeout: 175.77233362197876
##### Instance 10 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.57070255279541.

Properties batch 7, size 1
Remaining timeout: 175.68477034568787
##### Instance 10 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.45856547]], device='cuda:0') need to verify.
Model prediction is: tensor([ 4.99735355, -6.39168310, -1.93706679, -1.13927960, -4.57611656,
        -0.38430625, -3.21804404, -4.48542500, -1.97155690, -1.75819457],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /13 start_node /20 with alignment adjustment
setting alpha for layer /15 start_node /20 with alignment adjustment
setting alpha for layer /17 start_node /20 with alignment adjustment
setting alpha for layer /19 start_node /20 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 64]), torch.Size([1, 1, 64]), torch.Size([1, 1, 64]), torch.Size([1, 1, 64])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.45856547]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/input.7,/input.11,/20
Keeping alphas for these layers: ['/20']
Keeping alphas for these layers: ['/20']
Node /13 input 0: size torch.Size([64]) unstable 17
Node /15 input 0: size torch.Size([64]) unstable 10
Node /17 input 0: size torch.Size([64]) unstable 3
Node /19 input 0: size torch.Size([64]) unstable 7
-----------------
# of unstable neurons: 37
-----------------

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input.3, 0] 
split level 1: [/input, 56] 
split level 2: [/input, 55] 
split level 3: [/input.11, 31] 
split level 4: [/input.3, 10] 
split level 5: [/input.11, 30] 
split level 6: [/input.3, 37] 
split level 7: [/input.11, 36] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 256 / 256 = 1.0
pruning-in-iteration extra time: 0.00014925003051757812
Time: prepare 0.0735    bound 0.0106    transfer 0.0005    finalize 0.0340    func 0.1186    
Accumulated time: func 0.1186    prepare 0.0742    bound 0.0106    transfer 0.0005    finalize 0.0340    
Length of domains: 0
Time: pickout 0.0010    decision 0.0533    set_bounds 0.0215    solve 0.1187    add 0.0001    
Accumulated time: pickout 0.0010    decision 0.0533    set_bounds 0.0215    solve 0.1187    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.20402288436889648


Properties batch 8, size 1
Remaining timeout: 175.35982370376587
##### Instance 10 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.8064008951187134.
Result: safe in 4.7296 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 11, vnnlib ID: 11 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundFlatten(name=/11, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True)
  (/13): BoundRelu(name=/13, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
  (/input.11): BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True)
  (/19): BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
  (/20): BoundLinear(name=/20, inputs=[/19, /9, /10], perturbed=True)
)
Original output: tensor([[-1.77458501, -3.08997798, -0.85587084, -4.27951765,  0.63048375,
         -0.40018713,  3.82369781, -4.37410164,  0.26614323, -3.37166405]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True): [(BoundRelu(name=/13, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True): [(BoundRelu(name=/15, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True): [(BoundRelu(name=/19, inputs=[/input.11], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/13, inputs=[/input], perturbed=True)
   BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
layer /13 using sparse-features alpha with shape [24]; unstable size 24; total size 64 ([1, 64])
layer /13 start_node /input.3 using sparse-spec alpha [2, 26, 1, 24] with unstable size 25 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.7 using sparse-spec alpha [2, 22, 1, 24] with unstable size 21 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.11 using sparse-spec alpha [2, 33, 1, 24] with unstable size 32 total_size 64 output_shape torch.Size([64])
layer /13 start_node /20 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 64 ([1, 64])
layer /15 start_node /input.7 using sparse-spec alpha [2, 22, 1, 25] with unstable size 21 total_size 64 output_shape torch.Size([64])
layer /15 start_node /input.11 using sparse-spec alpha [2, 33, 1, 25] with unstable size 32 total_size 64 output_shape torch.Size([64])
layer /15 start_node /20 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [21]; unstable size 21; total size 64 ([1, 64])
layer /17 start_node /input.11 using sparse-spec alpha [2, 33, 1, 21] with unstable size 32 total_size 64 output_shape torch.Size([64])
layer /17 start_node /20 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
layer /19 using sparse-features alpha with shape [32]; unstable size 32; total size 64 ([1, 64])
layer /19 start_node /20 using full alpha [2, 9, 1, 32] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-21.23695374, -19.59336472, -25.40533829, -22.89195442, -17.31095695,
          -7.45977640, -28.33278275, -21.81808853, -23.85813904]],
       device='cuda:0') None
best_l after optimization: -43.91783905029297
alpha/beta optimization time: 2.1789588928222656
initial alpha-crown bounds: tensor([[-6.03784657, -3.54756093, -7.52043009, -5.23521948, -3.40067506,
         -0.73338789, -6.58669376, -5.90460110, -4.95142508]], device='cuda:0')
Worst class: (+ rhs) -7.520430088043213
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.05000000447034836, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.77458477, -3.08997798, -0.85587120, -4.27951813,  0.63048398,
         -0.40018690,  3.82369781, -4.37410212,  0.26614347, -3.37166429]],
       device='cuda:0')
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 1.42825019, -4.19945955, -0.66091168, -3.35806489, -2.64708114,
          -1.67193615, -0.64144492, -4.12919283,  0.51989913, -1.78799319],
         [ 1.42825019, -4.19945955, -0.66091168, -3.35806489, -2.64708114,
          -1.67193615, -0.64144492, -4.12919283,  0.51989913, -1.78799319]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[-2.06969500,  3.55801463,  0.01946676,  2.71661997,  2.00563622,
           1.03049123,  3.48774791, -1.16134405,  1.14654827]]],
       device='cuda:0')
number of violation:  2
Attack finished in 0.0145 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 2.2582 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 12, vnnlib ID: 12 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundFlatten(name=/11, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True)
  (/13): BoundRelu(name=/13, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
  (/input.11): BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True)
  (/19): BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
  (/20): BoundLinear(name=/20, inputs=[/19, /9, /10], perturbed=True)
)
Original output: tensor([[-4.94869614, -4.41878605, -4.31464720, -1.91265011,  0.46657547,
         -3.70708036, -8.59017944,  0.05812326, -2.44216371,  3.44741869]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True): [(BoundRelu(name=/13, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True): [(BoundRelu(name=/15, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True): [(BoundRelu(name=/19, inputs=[/input.11], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/13, inputs=[/input], perturbed=True)
   BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
layer /13 using sparse-features alpha with shape [17]; unstable size 17; total size 64 ([1, 64])
layer /13 start_node /input.3 using sparse-spec alpha [2, 21, 1, 17] with unstable size 20 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.7 using sparse-spec alpha [2, 10, 1, 17] with unstable size 9 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.11 using sparse-spec alpha [2, 15, 1, 17] with unstable size 14 total_size 64 output_shape torch.Size([64])
layer /13 start_node /20 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 64 ([1, 64])
layer /15 start_node /input.7 using sparse-spec alpha [2, 10, 1, 20] with unstable size 9 total_size 64 output_shape torch.Size([64])
layer /15 start_node /input.11 using sparse-spec alpha [2, 15, 1, 20] with unstable size 14 total_size 64 output_shape torch.Size([64])
layer /15 start_node /20 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [9]; unstable size 9; total size 64 ([1, 64])
layer /17 start_node /input.11 using sparse-spec alpha [2, 15, 1, 9] with unstable size 14 total_size 64 output_shape torch.Size([64])
layer /17 start_node /20 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
layer /19 using sparse-features alpha with shape [14]; unstable size 14; total size 64 ([1, 64])
layer /19 start_node /20 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ -6.43279791,  -2.69356346,  -7.02198219,  -2.87513018,  -4.65690708,
          -3.07735753, -11.19071960,   0.25464678,  -9.06835079]],
       device='cuda:0') None
best_l after optimization: -15.6888427734375
alpha/beta optimization time: 1.1038687229156494
initial alpha-crown bounds: tensor([[-1.48654652, -0.19055074, -2.05492687, -0.73623300, -3.15141392,
         -1.27438951, -4.62533283,  1.40261519, -3.57206416]], device='cuda:0')
Worst class: (+ rhs) -4.625332832336426
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.05000000447034836, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.94869614, -4.41878605, -4.31464815, -1.91265035,  0.46657571,
         -3.70708036, -8.59017944,  0.05812344, -2.44216371,  3.44741869]],
       device='cuda:0')
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.93139386, -4.08251333, -1.84289789, -4.52414036,  0.56177479,
          -4.12520742, -2.08881569, -2.07137060,  0.26482370,  0.31386408],
         [-2.93139386, -4.08251333, -1.84289789, -4.52414036,  0.56177479,
          -4.12520742, -2.08881569, -2.07137060,  0.26482370,  0.31386408]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 3.24525785,  4.39637756,  2.15676188,  4.83800459, -0.24791071,
           4.43907166,  2.40267968,  2.38523459,  0.04904038]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0157 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 1.1859 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 13, vnnlib ID: 13 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundFlatten(name=/11, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True)
  (/13): BoundRelu(name=/13, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
  (/input.11): BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True)
  (/19): BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
  (/20): BoundLinear(name=/20, inputs=[/19, /9, /10], perturbed=True)
)
Original output: tensor([[ 5.30712509, -6.14178848, -0.91977394, -2.98430920, -4.54894018,
         -1.18933320, -1.40684962, -4.79637909, -0.46626738, -2.41431308]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True): [(BoundRelu(name=/13, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True): [(BoundRelu(name=/15, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True): [(BoundRelu(name=/19, inputs=[/input.11], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/13, inputs=[/input], perturbed=True)
   BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
layer /13 using sparse-features alpha with shape [19]; unstable size 19; total size 64 ([1, 64])
layer /13 start_node /input.3 using sparse-spec alpha [2, 10, 1, 19] with unstable size 9 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.7 using sparse-spec alpha [2, 9, 1, 19] with unstable size 8 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.11 using sparse-spec alpha [2, 13, 1, 19] with unstable size 12 total_size 64 output_shape torch.Size([64])
layer /13 start_node /20 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 64 ([1, 64])
layer /15 start_node /input.7 using sparse-spec alpha [2, 9, 1, 9] with unstable size 8 total_size 64 output_shape torch.Size([64])
layer /15 start_node /input.11 using sparse-spec alpha [2, 13, 1, 9] with unstable size 12 total_size 64 output_shape torch.Size([64])
layer /15 start_node /20 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [8]; unstable size 8; total size 64 ([1, 64])
layer /17 start_node /input.11 using sparse-spec alpha [2, 13, 1, 8] with unstable size 12 total_size 64 output_shape torch.Size([64])
layer /17 start_node /20 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
layer /19 using sparse-features alpha with shape [12]; unstable size 12; total size 64 ([1, 64])
layer /19 start_node /20 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.90147781,  0.62174916,  4.27874947, -1.83340836,  2.80956006,
         -0.12094545, -1.11927509,  0.82188797, -0.90935850]], device='cuda:0') None

all verified at 4th iter
best_l after optimization: 17.197790145874023
alpha/beta optimization time: 0.185288667678833
initial alpha-crown bounds: tensor([[4.86490917, 1.28736794, 4.60186052, 0.20006609, 3.00745225, 0.77797472,
         0.92837691, 1.11988986, 0.40989280]], device='cuda:0')
Worst class: (+ rhs) 0.20006608963012695
verified with init bound!
Result: safe-incomplete in 0.2442 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 14, vnnlib ID: 14 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundFlatten(name=/11, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True)
  (/13): BoundRelu(name=/13, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
  (/input.11): BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True)
  (/19): BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
  (/20): BoundLinear(name=/20, inputs=[/19, /9, /10], perturbed=True)
)
Original output: tensor([[-9.23891068,  5.70626640, -4.35984135, -0.31690201, -0.73663676,
         -2.02580929, -5.26865959, -0.74705362, -2.26858091, -1.43456507]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True): [(BoundRelu(name=/13, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True): [(BoundRelu(name=/15, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True): [(BoundRelu(name=/19, inputs=[/input.11], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/13, inputs=[/input], perturbed=True)
   BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
layer /13 using sparse-features alpha with shape [26]; unstable size 26; total size 64 ([1, 64])
layer /13 start_node /input.3 using sparse-spec alpha [2, 25, 1, 26] with unstable size 24 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.7 using sparse-spec alpha [2, 18, 1, 26] with unstable size 17 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.11 using sparse-spec alpha [2, 31, 1, 26] with unstable size 30 total_size 64 output_shape torch.Size([64])
layer /13 start_node /20 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 64 ([1, 64])
layer /15 start_node /input.7 using sparse-spec alpha [2, 18, 1, 24] with unstable size 17 total_size 64 output_shape torch.Size([64])
layer /15 start_node /input.11 using sparse-spec alpha [2, 31, 1, 24] with unstable size 30 total_size 64 output_shape torch.Size([64])
layer /15 start_node /20 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [17]; unstable size 17; total size 64 ([1, 64])
layer /17 start_node /input.11 using sparse-spec alpha [2, 31, 1, 17] with unstable size 30 total_size 64 output_shape torch.Size([64])
layer /17 start_node /20 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
layer /19 using sparse-features alpha with shape [30]; unstable size 30; total size 64 ([1, 64])
layer /19 start_node /20 using full alpha [2, 9, 1, 30] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-14.15275574, -20.00680542, -16.64733315, -12.53346062, -14.16335106,
         -18.34960556, -14.38644695, -16.89663315, -13.77013683]],
       device='cuda:0') None
best_l after optimization: -13.474108695983887
alpha/beta optimization time: 3.3619768619537354
initial alpha-crown bounds: tensor([[ 2.27806973, -3.21386957, -2.75029898, -0.59946120, -1.40325379,
         -2.62854576, -1.49984205, -2.52942276, -1.12748516]], device='cuda:0')
Worst class: (+ rhs) -3.213869571685791
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.05000000447034836, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-9.23891068,  5.70626640, -4.35984182, -0.31690207, -0.73663706,
         -2.02580976, -5.26866007, -0.74705327, -2.26858068, -1.43456495]],
       device='cuda:0')
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.36059141,  1.08896792,  2.93620610,  0.51392543, -4.18028450,
          -1.92620742, -0.36263680, -1.83437610,  0.78816438, -5.35021257],
         [-4.36059141,  1.08896792,  2.93620610,  0.51392543, -4.18028450,
          -1.92620742, -0.36263680, -1.83437610,  0.78816438, -5.35021257]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 5.44955921, -1.84723818,  0.57504249,  5.26925230,  3.01517534,
           1.45160472,  2.92334414,  0.30080354,  6.43918037]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0170 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 3.4329 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 15, vnnlib ID: 15 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundFlatten(name=/11, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True)
  (/13): BoundRelu(name=/13, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
  (/input.11): BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True)
  (/19): BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
  (/20): BoundLinear(name=/20, inputs=[/19, /9, /10], perturbed=True)
)
Original output: tensor([[-2.60298395, -4.32606268, -2.98029733,  0.81344336, -3.92859864,
          3.60168219, -1.98875499, -4.65223360, -0.83715129, -0.98085511]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True): [(BoundRelu(name=/13, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True): [(BoundRelu(name=/15, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True): [(BoundRelu(name=/19, inputs=[/input.11], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/13, inputs=[/input], perturbed=True)
   BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
layer /13 using sparse-features alpha with shape [29]; unstable size 29; total size 64 ([1, 64])
layer /13 start_node /input.3 using sparse-spec alpha [2, 22, 1, 29] with unstable size 21 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.7 using sparse-spec alpha [2, 22, 1, 29] with unstable size 21 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.11 using sparse-spec alpha [2, 27, 1, 29] with unstable size 26 total_size 64 output_shape torch.Size([64])
layer /13 start_node /20 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 64 ([1, 64])
layer /15 start_node /input.7 using sparse-spec alpha [2, 22, 1, 21] with unstable size 21 total_size 64 output_shape torch.Size([64])
layer /15 start_node /input.11 using sparse-spec alpha [2, 27, 1, 21] with unstable size 26 total_size 64 output_shape torch.Size([64])
layer /15 start_node /20 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [21]; unstable size 21; total size 64 ([1, 64])
layer /17 start_node /input.11 using sparse-spec alpha [2, 27, 1, 21] with unstable size 26 total_size 64 output_shape torch.Size([64])
layer /17 start_node /20 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
layer /19 using sparse-features alpha with shape [26]; unstable size 26; total size 64 ([1, 64])
layer /19 start_node /20 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-14.83357620,  -6.24208450, -18.06035423,  -8.34569168,  -3.79662156,
         -10.27453232, -10.54620552, -12.99693108,  -1.63737583]],
       device='cuda:0') None
best_l after optimization: -27.95063591003418
alpha/beta optimization time: 2.027834177017212
initial alpha-crown bounds: tensor([[-4.99854660, -1.52287316, -6.42947721, -4.53589964, -0.39050031,
         -2.16021419, -3.13643360, -4.52084875, -0.25584280]], device='cuda:0')
Worst class: (+ rhs) -6.429477214813232
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.05000000447034836, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.60298443, -4.32606316, -2.98029733,  0.81344354, -3.92859864,
          3.60168219, -1.98875475, -4.65223360, -0.83715117, -0.98085499]],
       device='cuda:0')
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.75961757, -2.74160767, -2.52513576,  1.24604213, -2.45327067,
           1.03441191, -2.99411249, -4.36929846, -0.93175626, -0.97697663],
         [-2.75961757, -2.74160767, -2.52513576,  1.24604213, -2.45327067,
           1.03441191, -2.99411249, -4.36929846, -0.93175626, -0.97697663]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 3.79402947,  3.77601957,  3.55954766, -0.21163023,  3.48768258,
           4.02852440,  5.40371037,  1.96616817,  2.01138854]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0140 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 2.0892 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 16, vnnlib ID: 16 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundFlatten(name=/11, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True)
  (/13): BoundRelu(name=/13, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
  (/input.11): BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True)
  (/19): BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
  (/20): BoundLinear(name=/20, inputs=[/19, /9, /10], perturbed=True)
)
Original output: tensor([[-4.84920406, -5.95131397, -5.16865778, -3.41274142,  0.72311056,
         -3.01553869, -8.12024784,  0.80579877, -3.74015331,  4.05760765]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True): [(BoundRelu(name=/13, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True): [(BoundRelu(name=/15, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True): [(BoundRelu(name=/19, inputs=[/input.11], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/13, inputs=[/input], perturbed=True)
   BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
layer /13 using sparse-features alpha with shape [12]; unstable size 12; total size 64 ([1, 64])
layer /13 start_node /input.3 using sparse-spec alpha [2, 19, 1, 12] with unstable size 18 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.7 using sparse-spec alpha [2, 10, 1, 12] with unstable size 9 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.11 using sparse-spec alpha [2, 12, 1, 12] with unstable size 11 total_size 64 output_shape torch.Size([64])
layer /13 start_node /20 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 64 ([1, 64])
layer /15 start_node /input.7 using sparse-spec alpha [2, 10, 1, 18] with unstable size 9 total_size 64 output_shape torch.Size([64])
layer /15 start_node /input.11 using sparse-spec alpha [2, 12, 1, 18] with unstable size 11 total_size 64 output_shape torch.Size([64])
layer /15 start_node /20 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [9]; unstable size 9; total size 64 ([1, 64])
layer /17 start_node /input.11 using sparse-spec alpha [2, 12, 1, 9] with unstable size 11 total_size 64 output_shape torch.Size([64])
layer /17 start_node /20 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
layer /19 using sparse-features alpha with shape [11]; unstable size 11; total size 64 ([1, 64])
layer /19 start_node /20 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-5.77097559,  0.11354148, -4.34018326, -0.87882090, -3.07484007,
         -1.94791508, -7.74257278,  0.72856021, -6.11488438]], device='cuda:0') None
best_l after optimization: -4.991975784301758
alpha/beta optimization time: 1.7532846927642822
initial alpha-crown bounds: tensor([[-1.25513470,  1.67277622, -0.95713735,  0.36372876, -1.54800308,
         -0.20801401, -2.32401299,  1.82568479, -2.56186342]], device='cuda:0')
Worst class: (+ rhs) -2.561863422393799
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.05000000447034836, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.84920406, -5.95131397, -5.16865778, -3.41274166,  0.72311056,
         -3.01553822, -8.12024784,  0.80579841, -3.74015307,  4.05760813]],
       device='cuda:0')
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.24405074, -4.81650496, -1.99160957, -5.14371872,  0.60093200,
          -3.13738251, -1.00282109, -2.11943388, -0.51685691,  0.08713380],
         [-2.24405074, -4.81650496, -1.99160957, -5.14371872,  0.60093200,
          -3.13738251, -1.00282109, -2.11943388, -0.51685691,  0.08713380]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 2.33118463,  4.90363884,  2.07874346,  5.23085260, -0.51379824,
           3.22451639,  1.08995485,  2.20656776,  0.60399067]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0139 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 1.8258 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 17, vnnlib ID: 17 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundFlatten(name=/11, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True)
  (/13): BoundRelu(name=/13, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
  (/input.11): BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True)
  (/19): BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
  (/20): BoundLinear(name=/20, inputs=[/19, /9, /10], perturbed=True)
)
Original output: tensor([[-5.14083815, -2.89112329, -0.20494267, -0.18973063, -4.23001862,
         -2.81245756, -8.08814716,  5.12997723, -4.22819614, -0.83249557]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True): [(BoundRelu(name=/13, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True): [(BoundRelu(name=/15, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True): [(BoundRelu(name=/19, inputs=[/input.11], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/13, inputs=[/input], perturbed=True)
   BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
layer /13 using sparse-features alpha with shape [26]; unstable size 26; total size 64 ([1, 64])
layer /13 start_node /input.3 using sparse-spec alpha [2, 26, 1, 26] with unstable size 25 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.7 using sparse-spec alpha [2, 22, 1, 26] with unstable size 21 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.11 using sparse-spec alpha [2, 27, 1, 26] with unstable size 26 total_size 64 output_shape torch.Size([64])
layer /13 start_node /20 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 64 ([1, 64])
layer /15 start_node /input.7 using sparse-spec alpha [2, 22, 1, 25] with unstable size 21 total_size 64 output_shape torch.Size([64])
layer /15 start_node /input.11 using sparse-spec alpha [2, 27, 1, 25] with unstable size 26 total_size 64 output_shape torch.Size([64])
layer /15 start_node /20 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [21]; unstable size 21; total size 64 ([1, 64])
layer /17 start_node /input.11 using sparse-spec alpha [2, 27, 1, 21] with unstable size 26 total_size 64 output_shape torch.Size([64])
layer /17 start_node /20 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
layer /19 using sparse-features alpha with shape [26]; unstable size 26; total size 64 ([1, 64])
layer /19 start_node /20 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-33.82349396, -21.84863281, -13.68955421, -18.74886894, -33.31048584,
         -30.09596252, -38.40746307, -32.62319946, -28.43582916]],
       device='cuda:0') None
best_l after optimization: -45.821533203125
alpha/beta optimization time: 3.5408427715301514
initial alpha-crown bounds: tensor([[-8.34178352, -2.84242344, -4.73684883, -4.49429035, -4.31786633,
         -4.77293968, -6.30721474, -6.25351429, -3.75465178]], device='cuda:0')
Worst class: (+ rhs) -8.34178352355957
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.05000000447034836, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.14083815, -2.89112353, -0.20494244, -0.18973063, -4.23001862,
         -2.81245756, -8.08814716,  5.12997723, -4.22819614, -0.83249557]],
       device='cuda:0')
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.15545635, -4.68583393, -1.03632832, -1.07287145, -3.66469145,
          -1.09652364, -3.99290323, -1.78507698, -1.67634392, -0.90060055],
         [ 0.15545635, -4.68583393, -1.03632832, -1.07287145, -3.66469145,
          -1.09652364, -3.99290323, -1.78507698, -1.67634392, -0.90060055]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[-1.94053328,  2.90075684, -0.74874866, -0.71220553,  1.87961447,
          -0.68855333,  2.20782614, -0.10873306, -0.88447642]]],
       device='cuda:0')
number of violation:  6
Attack finished in 0.0132 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 3.6279 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 18, vnnlib ID: 18 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundFlatten(name=/11, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True)
  (/13): BoundRelu(name=/13, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
  (/input.11): BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True)
  (/19): BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
  (/20): BoundLinear(name=/20, inputs=[/19, /9, /10], perturbed=True)
)
Original output: tensor([[-3.77887249, -1.73567665,  0.34711531,  3.45239973, -4.01266861,
         -1.71511900, -6.11412048, -1.57377553, -0.34934685, -1.25960636]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True): [(BoundRelu(name=/13, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True): [(BoundRelu(name=/15, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True): [(BoundRelu(name=/19, inputs=[/input.11], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/13, inputs=[/input], perturbed=True)
   BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
layer /13 using sparse-features alpha with shape [20]; unstable size 20; total size 64 ([1, 64])
layer /13 start_node /input.3 using sparse-spec alpha [2, 26, 1, 20] with unstable size 25 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.7 using sparse-spec alpha [2, 20, 1, 20] with unstable size 19 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.11 using sparse-spec alpha [2, 28, 1, 20] with unstable size 27 total_size 64 output_shape torch.Size([64])
layer /13 start_node /20 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 64 ([1, 64])
layer /15 start_node /input.7 using sparse-spec alpha [2, 20, 1, 25] with unstable size 19 total_size 64 output_shape torch.Size([64])
layer /15 start_node /input.11 using sparse-spec alpha [2, 28, 1, 25] with unstable size 27 total_size 64 output_shape torch.Size([64])
layer /15 start_node /20 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [19]; unstable size 19; total size 64 ([1, 64])
layer /17 start_node /input.11 using sparse-spec alpha [2, 28, 1, 19] with unstable size 27 total_size 64 output_shape torch.Size([64])
layer /17 start_node /20 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
layer /19 using sparse-features alpha with shape [27]; unstable size 27; total size 64 ([1, 64])
layer /19 start_node /20 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-10.41378498,  -7.58080482,  -8.11977005, -15.36350632, -11.88911819,
         -20.71197510,  -4.95383596, -13.54479790, -12.30063820]],
       device='cuda:0') None
best_l after optimization: -28.811471939086914
alpha/beta optimization time: 3.468441963195801
initial alpha-crown bounds: tensor([[-1.75073421, -1.57517874, -3.49476361, -4.65375900, -3.15039325,
         -7.27620268, -0.09353089, -4.53730059, -2.27960920]], device='cuda:0')
Worst class: (+ rhs) -7.27620267868042
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.05000000447034836, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.77887273, -1.73567617,  0.34711519,  3.45239973, -4.01266813,
         -1.71511900, -6.11412096, -1.57377541, -0.34934691, -1.25960624]],
       device='cuda:0')
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.08465600, -2.85077548, -1.45914853, -2.33852959, -2.43085742,
          -1.24304950, -0.64798093, -4.59564590,  1.72858095, -1.44706976],
         [-2.08465600, -2.85077548, -1.45914853, -2.33852959, -2.43085742,
          -1.24304950, -0.64798093, -4.59564590,  1.72858095, -1.44706976]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[-0.25387359,  0.51224589, -0.87938106,  0.09232783, -1.09548008,
          -1.69054866,  2.25711632, -4.06711054, -0.89145982]]],
       device='cuda:0')
number of violation:  6
Attack finished in 0.0140 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 3.5425 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 19, vnnlib ID: 19 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundFlatten(name=/11, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True)
  (/13): BoundRelu(name=/13, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
  (/input.11): BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True)
  (/19): BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
  (/20): BoundLinear(name=/20, inputs=[/19, /9, /10], perturbed=True)
)
Original output: tensor([[-5.61096478, -2.48746228, -4.33470392, -2.47749567,  4.53463745,
         -4.62429953, -4.95223713, -0.55537343, -3.11538506,  1.37038052]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/11, /1, /2], perturbed=True): [(BoundRelu(name=/13, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/13, /3, /4], perturbed=True): [(BoundRelu(name=/15, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/15, /5, /6], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/17, /7, /8], perturbed=True): [(BoundRelu(name=/19, inputs=[/input.11], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/13, inputs=[/input], perturbed=True)
   BoundRelu(name=/15, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/19, inputs=[/input.11], perturbed=True)
layer /13 using sparse-features alpha with shape [27]; unstable size 27; total size 64 ([1, 64])
layer /13 start_node /input.3 using sparse-spec alpha [2, 26, 1, 27] with unstable size 25 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.7 using sparse-spec alpha [2, 13, 1, 27] with unstable size 12 total_size 64 output_shape torch.Size([64])
layer /13 start_node /input.11 using sparse-spec alpha [2, 19, 1, 27] with unstable size 18 total_size 64 output_shape torch.Size([64])
layer /13 start_node /20 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 64 ([1, 64])
layer /15 start_node /input.7 using sparse-spec alpha [2, 13, 1, 25] with unstable size 12 total_size 64 output_shape torch.Size([64])
layer /15 start_node /input.11 using sparse-spec alpha [2, 19, 1, 25] with unstable size 18 total_size 64 output_shape torch.Size([64])
layer /15 start_node /20 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [12]; unstable size 12; total size 64 ([1, 64])
layer /17 start_node /input.11 using sparse-spec alpha [2, 19, 1, 12] with unstable size 18 total_size 64 output_shape torch.Size([64])
layer /17 start_node /20 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
layer /19 using sparse-features alpha with shape [18]; unstable size 18; total size 64 ([1, 64])
layer /19 start_node /20 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-10.62967300,  -3.43946028, -11.02088261, -10.73114967, -12.51171398,
          -8.09059429,  -6.46188164, -12.99133301, -11.62791443]],
       device='cuda:0') None
best_l after optimization: -22.11186981201172
alpha/beta optimization time: 1.2409858703613281
initial alpha-crown bounds: tensor([[-1.88384485,  0.08095902, -3.69016933, -3.27238822, -3.23466897,
         -2.51000142, -0.81373549, -4.35624647, -2.43177509]], device='cuda:0')
Worst class: (+ rhs) -4.356246471405029
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.05000000447034836, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.61096478, -2.48746228, -4.33470297, -2.47749519,  4.53463745,
         -4.62430000, -4.95223761, -0.55537355, -3.11538482,  1.37038040]],
       device='cuda:0')
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.70199060, -3.71468902, -4.71073389, -2.08271956,  1.77597189,
          -4.17737246, -7.73632479,  0.02392092, -2.78042936,  3.34698701],
         [-5.70199060, -3.71468902, -4.71073389, -2.08271956,  1.77597189,
          -4.17737246, -7.73632479,  0.02392092, -2.78042936,  3.34698701]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 7.47796249,  5.49066067,  6.48670578,  3.85869145,  5.95334435,
           9.51229668,  1.75205100,  4.55640125, -1.57101512]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0154 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 1.3057 seconds
############# Summary #############
Final verified acc: 15.0% (total 20 examples)
Problem instances count: 20 , total verified (safe/unsat): 3 , total falsified (unsafe/sat): 17 , timeout: 0
mean time for ALL instances (total 20):2.7204521524425336, max time: 6.9227941036224365
mean time for verified SAFE instances(total 3): 1.8057161966959636, max time: 4.72956109046936
mean time for verified (SAFE + UNSAFE) instances (total 20): 2.72045351266861, max time: [6.9227941036224365, 2.3308775424957275, 3.5187220573425293, 3.192410469055176, 3.5768542289733887, 3.5343663692474365, 1.4384725093841553, 3.3871703147888184, 1.822155475616455, 2.2582404613494873, 1.1858549118041992, 3.4328854084014893, 2.0892043113708496, 1.8257975578308105, 3.6279265880584717, 3.542508840560913, 1.305680513381958]
mean time for verified UNSAFE instances (total 17): 2.8818777448990764, max time: 6.9227941036224365
unsafe-pgd (total 17), index: [0, 1, 2, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 19]
safe-incomplete (total 2), index: [3, 13]
safe (total 1), index: [10]
